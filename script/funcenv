#!/bin/bash -eux

#
# Script to run tests
#

top_srcdir=$(readlink -m $0/../..)
cd ${top_srcdir}

export PITRERY_BACKUP_DIR=/tmp/backup
export PITRERY_LOCAL_CONF=/tmp/pitrery_local.conf
export PATH=/usr/local/bin:$PATH:.

teardown() {
	exit_code=$?

	# If not on CI and we are docker entrypoint (PID 1), let's wait forever on
	# error. This allows user to enter the container and debug after a build
	# failure.
	if [ -z "${CI-}" -a $PPID = 1 -a $exit_code -gt 0 ] ; then
		tail -f /dev/null
	fi

	# stop and destroy PG cluster
	${PGBIN}/pg_ctl stop -w -D /tmp/pgsql
	rm -rf /tmp/pgsql

	rm -rf $PITRERY_BACKUP_DIR

	exit ${exit_code}
}

trap teardown EXIT INT TERM

for candidate in /usr/pgsql-${PGVERSION}/bin /usr/lib/postgresql/${PGVERSION}/bin ; do
    if PGBIN=$(readlink -e $candidate) ; then
        break
    fi
done
test -n "$PGBIN"
export PGBIN

# init PG cluster
${PGBIN}/initdb -D /tmp/pgsql

# Setup archiving
echo "archive_mode = on" >> /tmp/pgsql/postgresql.auto.conf
WAL_LEVEL='replica'
[[ ${PGVERSION} == '9.5' ]] && WAL_LEVEL='hot_standby'
echo "wal_level = '${WAL_LEVEL}'" >> /tmp/pgsql/postgresql.auto.conf
echo "archive_command = '$(type -p archive_wal) -a /tmp/backup/archived_wal %p'" >>/tmp/pgsql/postgresql.auto.conf

# start PG
${PGBIN}/pg_ctl start -w -D /tmp/pgsql -l /tmp/logfile

# create backup directory
mkdir -p $PITRERY_BACKUP_DIR

# run bats tests
bats -t t/func.bats
